#include <bits/stdc++.h>

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace __gnu_pbds;
using namespace std;
template <typename T>
using ordered_set =
    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

void _scan(int &x) { scanf("%d", &x); }
void _scan(long long &x) { scanf("%lld", &x); }
void _scan(double &x) { scanf("%lf", &x); }
void _scan(long double &x) { scanf("%Lf", &x); }
void _scan(char &x) { scanf(" %c", &x); }
void _scan(char *x) { scanf("%s", x); }
template <typename T>
void _scan(vector<T> &v) {
  for (int i = 0; i < (int)v.size(); i++) _scan(v[i]);
}
void scan() {}
template <typename T, typename... U>
void scan(T &head, U &... tail) {
  _scan(head);
  scan(tail...);
}
void set_IO() {
  cin.tie(0)->sync_with_stdio(0);
  cout << fixed << setprecision(15);
}

void _dbg(istream_iterator<string> it) {}
template <typename T, typename... U>
void _dbg(istream_iterator<string> it, T &head, U &... tail) {
  cout << *it << "=" << head << " ";
  _dbg(++it, tail...);
}

mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());

#define sz(x) (int)x.size()
#define all(x) x.begin(), x.end()
#define pb push_back
#define fst first
#define snd second
#define rep(i, x, n) \
  for (__typeof(n) i = (x); i != (n); i += 1 - 2 * ((x) > (n)))
#define line cout << "\n-----------------------------\n";
#define dbg(args...)                         \
  {                                          \
    string _s = #args;                       \
    replace(_s.begin(), _s.end(), ',', ' '); \
    stringstream _ss(_s);                    \
    istream_iterator<string> _it(_ss);       \
    _dbg(_it, args);                         \
  }

typedef __uint128_t u128;
typedef vector<int> vi;

struct DSU {
	vi p, size;

	void init(int n) {
    p = vi(n); size = vi(n,1);
    rep(i,0,n) p[i] = i;
	}
	
	int findSet(int x){
    if(p[x] != x) return p[x] = findSet(p[x]);
    return x;
	}

	void unionSet(int x, int y){
    int rx = findSet(x), ry = findSet(y);
    if(size[rx] < size[ry]) swap(rx, ry);
    p[ry] = rx, size[rx] += size[ry];
	} 
};

int n;
string t;

void solve(){
	vi in(26,0), out(26,0);
	map<char,char> mp;
	DSU dsu; dsu.init(26);
	
	if(t[0]=='a'){ 
		out[1]=1,in[0]=1,mp['a']='b';
		dsu.unionSet(0,1);
	}
	else{
		out[0]=1,in[t[0]-'a']=1,mp[t[0]]='a';
		dsu.unionSet(0,t[0]-'a');
	}
	
	rep(i,1,n) if(mp.find(t[i]) == mp.end()){
		rep(j,0,26){
			if(out[j]==0 && dsu.findSet(t[i]-'a') != dsu.findSet(j)){
				mp[t[i]] = 'a'+j;
				out[j]=1, in[t[i]-'a']=1;
				dsu.unionSet(t[i]-'a',j);
				break;
			}
		}
	}	
	
	int c1=0, c2=0;
	rep(i,0,26){
		if(in[i]==0) c1=i;
		else if(out[i]==0) c2=i;
	}
	mp[c1+'a'] = c2+'a';
	
	for(char c : t) cout<<mp[c];
	cout<<"\n";
}

int main(){
	set_IO();
	int tt;
	cin>>tt;
	while(tt--){
		cin>>n>>t;
		solve();
	}
  return 0;
}
// "Si puedes imaginarlo puedes programarlo" Alejandro Taboada 
